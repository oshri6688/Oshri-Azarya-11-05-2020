{"version":3,"sources":["utils/storageUtils/storageUtils.js","constants/temperatureUnits.js","constants/storageItems.js","constants/themeTypes.js","redux/reducers/SettingsReducer/SettingsReducer.js","redux/reducers/index.js","redux/actionsTypes/SettingsActionsTypes.js","redux/store.js","styles/globalStyle/globalStyle.js","styles/theme/theme.js","shared/components/DataWidget/DataWidget.style.js","shared/components/DataWidget/DataWidget.js","components/pages/HomePage/HomePage.style.js","components/pages/HomePage/LocationSearchField/LocationSearchField.style.js","utils/dataUtils/dataUtils.js","utils/temperatureUtils/temperatureUtils.js","services/WeatherServices/WeatherServices.js","shared/hooks/useFetchData/useFetchData.js","components/pages/HomePage/LocationSearchField/useLocationSearch/useLocationSearch.js","components/pages/HomePage/LocationSearchField/SearchField/SearchField.js","components/pages/HomePage/LocationSearchField/LocationSearchField.js","redux/selectors/SettingsSelectors/SettingsSelectors.js","redux/actions/SettingsActions/SettingsActions.js","shared/components/WeatherIcon/WeatherIcon.style.js","shared/components/WeatherIcon/WeatherIcon.js","shared/components/WeatherTemperature/WeatherTemperature.style.js","shared/components/WeatherTemperature/WeatherTemperature.js","components/pages/HomePage/WeatherCard/DailyForecasts/WeatherItem/WeatherItem.style.js","components/pages/HomePage/WeatherCard/DailyForecasts/WeatherItem/WeatherItem.js","components/pages/HomePage/WeatherCard/DailyForecasts/DailyForecasts.style.js","components/pages/HomePage/WeatherCard/DailyForecasts/DailyForecasts.js","components/pages/HomePage/WeatherCard/CurrentWeather/CurrentWeather.style.js","components/pages/HomePage/WeatherCard/CurrentWeather/CurrentWeather.js","shared/hocs/excludeComponentProps/excludeComponentProps.js","components/pages/HomePage/WeatherCard/WeatherCard.style.js","components/pages/HomePage/WeatherCard/WeatherCard.js","components/pages/HomePage/useWeather/useWeather.js","components/pages/HomePage/HomePage.js","components/pages/FavoritesPage/FavoritesPage.style.js","constants/paths.js","components/pages/FavoritesPage/FavoriteItem/FavoriteItem.style.js","components/pages/FavoritesPage/FavoriteItem/FavoriteItem.js","components/pages/FavoritesPage/useFavorites/useFavorites.js","components/pages/FavoritesPage/FavoritesPage.js","components/Layout/Header/TemperatureSwitch/TemperatureSwitch.style.js","components/Layout/Header/TemperatureSwitch/TemperatureSwitch.js","components/Layout/Header/HeaderLink/HeaderLink.style.js","components/Layout/Header/HeaderLink/HeaderLink.js","components/Layout/Header/Header.style.js","components/Layout/Header/Header.js","components/Layout/Layout.style.js","components/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["key","defaultValue","value","localStorage","getItem","JSON","parse","jsonValue","stringify","setItem","initialState","favorites","storageUtils","storageItems","themeType","themeTypes","temperatureUnit","temperatureUnits","reducers","combineReducers","settings","state","action","type","store","createStore","rootReducer","compose","applyMiddleware","reduxThunk","globalStyle","createGlobalStyle","themes","createMuiTheme","palette","overrides","MuiAppBar","colorPrimary","backgroundColor","StyledDataWidget","styled","div","LoadingWrapper","isLoading","DataWidget","loading","hasData","noDataMessage","children","className","showNoDataMessage","showChildren","Typography","variant","color","CircularProgress","StyledHomePage","theme","breakpoints","down","StyledLocationSearchField","getData","res","get","data","Array","isArray","celsius","weatherUrl","defaultParams","apikey","language","getWeatherIconUrl","iconId","getLocationByGeoPosition","latitude","longitude","params","q","axios","then","dataUtils","id","city","country","administrativeArea","getAutoCompleteLocations","query","map","locationData","getCurrentWeather","locationId","weatherData","weatherIcon","timestamp","text","icon","temperature","getFiveDayForecasts","metric","forecastData","minCelsius","maxCelsius","minTemperature","temperatureUtils","maxTemperature","useFetchData","fetchData","dataName","defaultData","updateLoadingOnlyWhenDataEmpty","clearDataOnlyWhenFetchFailed","clearDataBeforeFetch","useState","setData","setIsLoading","shouldUpdateLoading","useRef","shouldClearData","current","isEmpty","clearData","loadData","catch","error","console","finally","useLocationSearch","onSelect","inputValue","setInputValue","autoCompleteLocations","WeatherServices","useEffect","setTimeout","length","clearTimeout","locations","useMyLocation","navigator","geolocation","getCurrentPosition","position","coords","startAdornment","InputAdornment","SearchField","InputProps","restProps","TextField","placeholder","LocationSearchField","Autocomplete","autoComplete","forcePopupIcon","openOnFocus","options","getOptionLabel","option","getOptionSelected","renderInput","onChange","event","onInputChange","Tooltip","title","IconButton","onClick","getSettings","getThemeType","createSelector","getTemperatureUnit","getFavorites","isFavoriteLocation","defaultMemoize","some","location","setTemperatureUnit","toggleFavoriteLocation","dispatch","getState","favoriteIndex","findIndex","favoriteLocation","newFavorites","splice","push","setFavorites","StyledWeatherIcon","WeatherImage","img","WeatherIcon","src","StyledWeatherTemperature","WeatherTemperature","props","useSelector","temperatureNumber","parseFloat","toFixed","component","StyledWeatherItem","Paper","TemperatureWrapper","WeatherItem","item","day","moment","unix","format","placement","arrow","elevation","Hidden","smUp","StyledDailyForecasts","DailyForecasts","items","StyledCurrentWeather","CurrentWeatherDetails","WeatherTemperatureWrapper","CurrentWeather","currentWeather","excludeComponentProps","Component","excludedProps","forwardRef","ref","filteredProps","omit","StyledWeatherCard","Card","WeatherCardContent","CardContent","CustomIconButton","FavoriteButton","isFavorite","getFavoriteButtonTooltipTitle","WeatherCard","weather","dailyForecasts","useDispatch","fontSize","fetchWeather","currentWeatherRequest","dailyForecastsRequest","Promise","all","useWeather","HomePage","routerLocation","useRouterLocation","selectedLocation","setSelectedLocation","StyledFavoritesPage","StyledFavoriteItem","FavoriteItem","history","useHistory","paths","fetchCurrentWeather","fetchWeatherLocations","requests","filteredData","filter","Error","useFavorites","favoriteLocations","weatherLocations","FavoritesPage","TemperatureButton","Button","attrs","disableRipple","disableElevation","StyledTemperatureSwitch","buttonColors","getButtonColor","selectedUnit","unit","TemperatureSwitch","Link","NavLink","activeClassName","exact","secondary","LinkLabel","label","HeaderLink","Icon","linkProps","StyledToolbar","Toolbar","StyledIconButton","Title","span","Links","Controls","StyledMenuItem","MenuItem","MenuItemLabel","noWrap","MenuItemLink","themeIcons","Header","moreButtonAnchorEl","setMoreButtonAnchorEl","themeIcon","closeHeaderMenu","onToggleTheme","newThemeType","setThemeType","AppBar","xsDown","to","Icons","currentTarget","Menu","anchorEl","open","Boolean","onClose","Divider","StyledLayout","Content","Layout","basename","process","path","App","responsiveFontSizes","getTheme","StylesProvider","injectFirst","CssBaseline","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a1056b2d.chunk.js","sourcesContent":["const getItem = (key, defaultValue) => {\r\n  let value = localStorage.getItem(key);\r\n\r\n  value = JSON.parse(value);\r\n\r\n  if (!value) {\r\n    value = defaultValue;\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nconst setItem = (key, value) => {\r\n  const jsonValue = JSON.stringify(value);\r\n\r\n  localStorage.setItem(key, jsonValue);\r\n};\r\n\r\nexport default {\r\n  getItem,\r\n  setItem,\r\n};\r\n","const CELSIUS = 'celsius';\r\nconst FAHRENHEIT = 'fahrenheit';\r\n\r\nexport default { CELSIUS, FAHRENHEIT };\r\n","const FAVORITES = 'favorites';\r\nconst THEME_TYPE = 'themeType';\r\nconst TEMPERATURE_UNIT = 'temperatureUnit';\r\n\r\nexport default { FAVORITES, THEME_TYPE, TEMPERATURE_UNIT };\r\n","const LIGHT = 'light';\r\nconst DARK = 'dark';\r\n\r\nexport default { LIGHT, DARK };\r\n","import * as ActionTypes from 'redux/actionsTypes/SettingsActionsTypes';\r\nimport storageUtils from 'utils/storageUtils/storageUtils';\r\nimport temperatureUnits from 'constants/temperatureUnits';\r\nimport storageItems from 'constants/storageItems';\r\nimport themeTypes from 'constants/themeTypes';\r\n\r\nexport const initialState = {\r\n  favorites: storageUtils.getItem(storageItems.FAVORITES, []),\r\n  themeType: storageUtils.getItem(storageItems.THEME_TYPE, themeTypes.LIGHT),\r\n  temperatureUnit: storageUtils.getItem(storageItems.TEMPERATURE_UNIT, temperatureUnits.CELSIUS),\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_FAVORITES:\r\n      return { ...state, favorites: action.favorites };\r\n\r\n    case ActionTypes.SET_THEME_TYPE:\r\n      return { ...state, themeType: action.themeType };\r\n\r\n    case ActionTypes.SET_TEMPERATURE_UNIT:\r\n      return { ...state, temperatureUnit: action.temperatureUnit };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport SettingsReducer from './SettingsReducer/SettingsReducer';\r\n\r\nconst reducers = combineReducers({\r\n  settings: SettingsReducer,\r\n});\r\n\r\nexport default reducers;\r\n","export const SET_FAVORITES = 'SET_FAVORITES';\r\nexport const SET_THEME_TYPE = 'SET_THEME_TYPE';\r\nexport const SET_TEMPERATURE_UNIT = 'SET_TEMPERATURE_UNIT';\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nexport const initialState = {};\r\n\r\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(reduxThunk)));\r\n\r\nexport default store;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst globalStyle = createGlobalStyle`\r\n  body,\r\n  html,\r\n  #root {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport default globalStyle;\r\n","import themeTypes from 'constants/themeTypes';\r\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\r\n\r\nexport const customDarkTheme = {\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n  overrides: {\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: '#212121',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const themes = {\r\n  [themeTypes.LIGHT]: createMuiTheme(),\r\n  [themeTypes.DARK]: createMuiTheme(customDarkTheme),\r\n};\r\n\r\nexport const getTheme = (themeType) => responsiveFontSizes(themes[themeType]);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDataWidget = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport const LoadingWrapper = styled.div`\r\n  position: absolute;\r\n  display: ${({ isLoading }) => (isLoading ? 'flex' : 'none')};\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n","import React from 'react';\r\nimport { Typography, CircularProgress } from '@material-ui/core';\r\nimport { StyledDataWidget, LoadingWrapper } from './DataWidget.style';\r\n\r\nconst DataWidget = ({ loading, hasData, noDataMessage, children, className }) => {\r\n  const showNoDataMessage = !hasData && !loading;\r\n  const showChildren = hasData && !loading;\r\n\r\n  return (\r\n    <StyledDataWidget className={className}>\r\n      {showChildren && children}\r\n\r\n      {showNoDataMessage && (\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          {noDataMessage}\r\n        </Typography>\r\n      )}\r\n\r\n      <LoadingWrapper isLoading={loading}>\r\n        <CircularProgress />\r\n      </LoadingWrapper>\r\n    </StyledDataWidget>\r\n  );\r\n};\r\n\r\nexport default DataWidget;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledHomePage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 100%;\r\n  width: 80%;\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('sm')} {\r\n    width: 90%;\r\n  }\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    width: 100%;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledLocationSearchField = styled.div`\r\n  display: grid;\r\n  grid-auto-rows: 1fr;\r\n  grid-template-columns: 1fr auto;\r\n  grid-column-gap: 10px;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n","import { get } from 'lodash';\r\n\r\nconst getData = (res) => {\r\n  return get(res, 'data', null);\r\n};\r\n\r\nconst getDataList = (res) => {\r\n  const data = getData(res);\r\n\r\n  return Array.isArray(data) ? data : [];\r\n};\r\n\r\nconst getErrorData = (err) => {\r\n  return get(err, 'response.data', null);\r\n};\r\n\r\nconst throwErrorData = (err) => {\r\n  const errData = getErrorData(err);\r\n\r\n  throw errData;\r\n};\r\n\r\nexport default {\r\n  getDataList,\r\n  getData,\r\n  getErrorData,\r\n  throwErrorData,\r\n};\r\n","const convertToFahrenheit = (celsius) => (celsius * 9) / 5 + 32;\r\n\r\nexport default {\r\n  convertToFahrenheit,\r\n};\r\n","import axios from 'axios';\r\nimport { get } from 'lodash';\r\nimport dataUtils from 'utils/dataUtils/dataUtils';\r\nimport temperatureUnits from 'constants/temperatureUnits';\r\nimport temperatureUtils from 'utils/temperatureUtils/temperatureUtils';\r\n\r\nexport const weatherUrl = 'https://dataservice.accuweather.com';\r\nexport const weatherIconsUrl = 'https://vortex.accuweather.com/adc2010/images/slate/icons';\r\n\r\nexport const defaultParams = {\r\n  apikey: 'obnJ0GC5Xb2PyL0rpKlnoEAo2ZNgGCZ5',\r\n  language: 'en-us',\r\n};\r\n\r\nconst getWeatherIconUrl = (iconId) => `${weatherIconsUrl}/${iconId}.svg`;\r\n\r\nconst getLocationByGeoPosition = (latitude, longitude) => {\r\n  const params = { q: `${latitude},${longitude}`, ...defaultParams };\r\n\r\n  return axios.get(`${weatherUrl}/locations/v1/cities/geoposition/search`, { params }).then((res) => {\r\n    const data = dataUtils.getData(res);\r\n\r\n    return {\r\n      id: get(data, 'Key'),\r\n      city: get(data, 'EnglishName'),\r\n      country: get(data, 'Country.EnglishName'),\r\n      administrativeArea: get(data, 'AdministrativeArea.ID'),\r\n    };\r\n  });\r\n};\r\n\r\nconst getAutoCompleteLocations = (query) => {\r\n  const params = { q: query, ...defaultParams };\r\n\r\n  return axios.get(`${weatherUrl}/locations/v1/cities/autocomplete`, { params }).then((res) => {\r\n    const data = dataUtils.getDataList(res);\r\n    const locations = data.map((locationData) => ({\r\n      id: get(locationData, 'Key'),\r\n      city: get(locationData, 'LocalizedName'),\r\n      country: get(locationData, 'Country.LocalizedName'),\r\n      administrativeArea: get(locationData, 'AdministrativeArea.ID'),\r\n    }));\r\n\r\n    return locations;\r\n  });\r\n};\r\n\r\nconst getCurrentWeather = (locationId) => {\r\n  return axios.get(`${weatherUrl}/currentconditions/v1/${locationId}`, { params: defaultParams }).then((res) => {\r\n    const data = dataUtils.getDataList(res);\r\n    const weatherData = data[0];\r\n    const weatherIcon = get(weatherData, 'WeatherIcon');\r\n\r\n    return {\r\n      timestamp: get(weatherData, 'EpochTime'),\r\n      text: get(weatherData, 'WeatherText'),\r\n      icon: getWeatherIconUrl(weatherIcon),\r\n      temperature: {\r\n        [temperatureUnits.CELSIUS]: get(weatherData, 'Temperature.Metric.Value'),\r\n        [temperatureUnits.FAHRENHEIT]: get(weatherData, 'Temperature.Imperial.Value'),\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\nconst getFiveDayForecasts = (locationId) => {\r\n  const params = { metric: true, ...defaultParams };\r\n\r\n  return axios.get(`${weatherUrl}/forecasts/v1/daily/5day/${locationId}`, { params }).then((res) => {\r\n    const data = dataUtils.getData(res);\r\n    const dailyForecastsData = get(data, 'DailyForecasts', []);\r\n\r\n    const dailyForecasts = dailyForecastsData.map((forecastData) => {\r\n      const weatherIcon = get(forecastData, 'Day.Icon');\r\n      const minCelsius = get(forecastData, 'Temperature.Minimum.Value');\r\n      const maxCelsius = get(forecastData, 'Temperature.Maximum.Value');\r\n\r\n      return {\r\n        timestamp: get(forecastData, 'EpochDate'),\r\n        text: get(forecastData, 'Day.IconPhrase'),\r\n        icon: getWeatherIconUrl(weatherIcon),\r\n        minTemperature: {\r\n          [temperatureUnits.CELSIUS]: minCelsius,\r\n          [temperatureUnits.FAHRENHEIT]: temperatureUtils.convertToFahrenheit(minCelsius),\r\n        },\r\n\r\n        maxTemperature: {\r\n          [temperatureUnits.CELSIUS]: maxCelsius,\r\n          [temperatureUnits.FAHRENHEIT]: temperatureUtils.convertToFahrenheit(maxCelsius),\r\n        },\r\n      };\r\n    });\r\n\r\n    return dailyForecasts;\r\n  });\r\n};\r\n\r\nexport default {\r\n  getLocationByGeoPosition,\r\n  getAutoCompleteLocations,\r\n  getCurrentWeather,\r\n  getFiveDayForecasts,\r\n};\r\n","import { useState, useRef } from 'react';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst useFetchData = ({\r\n  fetchData,\r\n  dataName,\r\n  defaultData = null,\r\n  updateLoadingOnlyWhenDataEmpty = false,\r\n  clearDataOnlyWhenFetchFailed = false,\r\n  clearDataBeforeFetch = true,\r\n}) => {\r\n  const [data, setData] = useState(defaultData);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const shouldUpdateLoading = useRef();\r\n  const shouldClearData = clearDataBeforeFetch && !clearDataOnlyWhenFetchFailed;\r\n\r\n  shouldUpdateLoading.current = !updateLoadingOnlyWhenDataEmpty || isEmpty(data);\r\n\r\n  const clearData = () => {\r\n    shouldUpdateLoading.current = true;\r\n    setData(defaultData);\r\n  };\r\n\r\n  const loadData = (...args) => {\r\n    shouldClearData && clearData();\r\n    shouldUpdateLoading.current && setIsLoading(true);\r\n\r\n    return fetchData(...args)\r\n      .then((data) => setData(data))\r\n      .catch((error) => {\r\n        clearDataOnlyWhenFetchFailed && clearData();\r\n\r\n        console.error(`Error while fetching ${dataName} -`, error);\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  };\r\n\r\n  return {\r\n    data,\r\n    loadData,\r\n    isLoading,\r\n    clearData,\r\n  };\r\n};\r\n\r\nexport default useFetchData;\r\n","import WeatherServices from 'services/WeatherServices/WeatherServices';\r\nimport useFetchData from 'shared/hooks/useFetchData/useFetchData';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useLocationSearch = (onSelect) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const autoCompleteLocations = useFetchData({\r\n    fetchData: WeatherServices.getAutoCompleteLocations,\r\n    dataName: 'autoComplete locations',\r\n    defaultData: [],\r\n    updateLoadingOnlyWhenDataEmpty: true,\r\n    clearDataOnlyWhenFetchFailed: true,\r\n  });\r\n\r\n  const onInputChange = () => {\r\n    if (inputValue.length >= 2) {\r\n      autoCompleteLocations.loadData(inputValue);\r\n    } else {\r\n      autoCompleteLocations.clearData();\r\n    }\r\n  };\r\n\r\n  const useMyLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n\r\n      WeatherServices.getLocationByGeoPosition(latitude, longitude).then((geolocation) => onSelect(geolocation));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const id = setTimeout(() => onInputChange(), 500);\r\n\r\n    return () => clearTimeout(id);\r\n  }, [inputValue]);\r\n\r\n  return {\r\n    locations: autoCompleteLocations.data,\r\n    isLoading: autoCompleteLocations.isLoading,\r\n    setInputValue,\r\n    useMyLocation,\r\n  };\r\n};\r\n\r\nexport default useLocationSearch;\r\n","import React from 'react';\r\nimport { TextField, InputAdornment } from '@material-ui/core';\r\nimport * as Icons from '@material-ui/icons';\r\n\r\nconst startAdornment = (\r\n  <InputAdornment position=\"start\">\r\n    <Icons.Search />\r\n  </InputAdornment>\r\n);\r\n\r\nconst SearchField = ({ InputProps, ...restProps }) => (\r\n  <TextField\r\n    placeholder=\"Enter a Location\"\r\n    variant=\"outlined\"\r\n    InputProps={{ ...InputProps, startAdornment }}\r\n    {...restProps}\r\n  />\r\n);\r\n\r\nexport default SearchField;\r\n","import React from 'react';\r\nimport * as Icons from '@material-ui/icons';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { IconButton, Tooltip } from '@material-ui/core';\r\nimport { StyledLocationSearchField } from './LocationSearchField.style';\r\nimport useLocationSearch from './useLocationSearch/useLocationSearch';\r\nimport SearchField from './SearchField/SearchField';\r\n\r\nconst LocationSearchField = ({ onSelect }) => {\r\n  const { locations, isLoading, setInputValue, useMyLocation } = useLocationSearch(onSelect);\r\n\r\n  return (\r\n    <StyledLocationSearchField>\r\n      <Autocomplete\r\n        autoComplete\r\n        forcePopupIcon={false}\r\n        openOnFocus={false}\r\n        options={locations}\r\n        loading={isLoading}\r\n        getOptionLabel={(option) => `${option.city}, ${option.administrativeArea}, ${option.country}`}\r\n        getOptionSelected={(option, value) => option.id === value.id}\r\n        renderInput={SearchField}\r\n        onChange={(event, option) => onSelect(option)}\r\n        onInputChange={(event, value) => setInputValue(value)}\r\n      />\r\n      <Tooltip title=\"Use my location\">\r\n        <IconButton onClick={useMyLocation}>\r\n          <Icons.MyLocation />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </StyledLocationSearchField>\r\n  );\r\n};\r\n\r\nexport default LocationSearchField;\r\n","import { createSelector, defaultMemoize } from 'reselect';\r\n\r\nexport const getSettings = (state) => state.settings;\r\n\r\nexport const getThemeType = createSelector(getSettings, (settings) => settings.themeType);\r\n\r\nexport const getTemperatureUnit = createSelector(getSettings, (settings) => settings.temperatureUnit);\r\n\r\nexport const getFavorites = createSelector(getSettings, (settings) => settings.favorites);\r\n\r\nexport const isFavoriteLocation = defaultMemoize((locationId) => {\r\n  return createSelector(getFavorites, (favorites) => favorites.some((location) => location.id === locationId));\r\n});\r\n","import * as ActionTypes from 'redux/actionsTypes/SettingsActionsTypes';\r\nimport { getFavorites } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport storageUtils from 'utils/storageUtils/storageUtils';\r\nimport storageItems from 'constants/storageItems';\r\n\r\nexport const setTemperatureUnit = (temperatureUnit) => {\r\n  storageUtils.setItem(storageItems.TEMPERATURE_UNIT, temperatureUnit);\r\n\r\n  return { type: ActionTypes.SET_TEMPERATURE_UNIT, temperatureUnit };\r\n};\r\n\r\nexport const setThemeType = (themeType) => {\r\n  storageUtils.setItem(storageItems.THEME_TYPE, themeType);\r\n\r\n  return { type: ActionTypes.SET_THEME_TYPE, themeType };\r\n};\r\n\r\nexport const setFavorites = (favorites) => {\r\n  storageUtils.setItem(storageItems.FAVORITES, favorites);\r\n\r\n  return { type: ActionTypes.SET_FAVORITES, favorites };\r\n};\r\n\r\nexport const toggleFavoriteLocation = (location) => {\r\n  return (dispatch, getState) => {\r\n    const state = getState();\r\n    const favorites = getFavorites(state);\r\n    const favoriteIndex = favorites.findIndex((favoriteLocation) => favoriteLocation.id === location.id);\r\n    const newFavorites = [...favorites];\r\n\r\n    if (favoriteIndex >= 0) {\r\n      newFavorites.splice(favoriteIndex, 1);\r\n    } else {\r\n      newFavorites.push(location);\r\n    }\r\n\r\n    dispatch(setFavorites(newFavorites));\r\n  };\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledWeatherIcon = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n`;\r\n\r\nexport const WeatherImage = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n","import React from 'react';\r\nimport { StyledWeatherIcon, WeatherImage } from './WeatherIcon.style';\r\n\r\nconst WeatherIcon = ({ src, className }) => {\r\n  return (\r\n    <StyledWeatherIcon className={className}>\r\n      <WeatherImage src={src} />\r\n    </StyledWeatherIcon>\r\n  );\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import styled from 'styled-components';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport const StyledWeatherTemperature = styled(Typography)`\r\n  &:after {\r\n    content: '°';\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTemperatureUnit } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport { StyledWeatherTemperature } from './WeatherTemperature.style';\r\n\r\nconst WeatherTemperature = ({ temperature, ...props }) => {\r\n  const temperatureUnit = useSelector(getTemperatureUnit);\r\n  const temperatureNumber = parseFloat(temperature[temperatureUnit]).toFixed(1);\r\n\r\n  return (\r\n    <StyledWeatherTemperature component=\"span\" {...props}>\r\n      {temperatureNumber}\r\n    </StyledWeatherTemperature>\r\n  );\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","import styled from 'styled-components';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nexport const StyledWeatherItem = styled(Paper)`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto minmax(50px, 1fr) auto;\r\n  grid-gap: 5px;\r\n  justify-items: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 10px;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    grid-template-columns: 50px 50px 1fr 1fr;\r\n    grid-template-rows: 100%;\r\n    grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const TemperatureWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n\r\n  & > * {\r\n    margin: 0 5px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { Typography, Tooltip, Hidden } from '@material-ui/core';\r\nimport WeatherIcon from 'shared/components/WeatherIcon/WeatherIcon';\r\nimport WeatherTemperature from 'shared/components/WeatherTemperature/WeatherTemperature';\r\nimport { StyledWeatherItem, TemperatureWrapper } from './WeatherItem.style';\r\n\r\nconst WeatherItem = ({ item }) => {\r\n  const day = moment.unix(item.timestamp).format('ddd');\r\n\r\n  return (\r\n    <Tooltip title={item.text} placement=\"top\" arrow>\r\n      <StyledWeatherItem elevation={3}>\r\n        <Typography variant=\"h6\">{day}</Typography>\r\n\r\n        <WeatherIcon src={item.icon} />\r\n\r\n        <TemperatureWrapper>\r\n          <WeatherTemperature temperature={item.minTemperature} />\r\n          <WeatherTemperature temperature={item.maxTemperature} color=\"textSecondary\" />\r\n        </TemperatureWrapper>\r\n\r\n        <Hidden smUp>\r\n          <Typography variant=\"h6\">{item.text}</Typography>\r\n        </Hidden>\r\n      </StyledWeatherItem>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default WeatherItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDailyForecasts = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(0, 1fr));\r\n  grid-template-rows: 150px;\r\n  grid-gap: 20px;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: unset;\r\n    grid-auto-rows: 100px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport WeatherItem from './WeatherItem/WeatherItem';\r\nimport { StyledDailyForecasts } from './DailyForecasts.style';\r\n\r\nconst DailyForecasts = ({ items }) => {\r\n  return (\r\n    <StyledDailyForecasts>\r\n      {items.map((item) => (\r\n        <WeatherItem key={item.timestamp} item={item} />\r\n      ))}\r\n    </StyledDailyForecasts>\r\n  );\r\n};\r\n\r\nexport default DailyForecasts;\r\n","import styled from 'styled-components';\r\nimport WeatherTemperature from 'shared/components/WeatherTemperature/WeatherTemperature';\r\n\r\nexport const StyledCurrentWeather = styled.div`\r\n  display: grid;\r\n  grid-template-rows: minmax(0, 1fr);\r\n  grid-template-columns: minmax(100px, 30%) minmax(200px, 400px);\r\n  grid-gap: 20px;\r\n  padding-right: 40px;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('sm')} {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto minmax(200px, 300px);\r\n    grid-gap: 10px;\r\n  }\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    padding-right: 0;\r\n    padding-top: 40px;\r\n  }\r\n`;\r\n\r\nexport const CurrentWeatherDetails = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const WeatherTemperatureWrapper = styled.div`\r\n  display: grid;\r\n  grid-auto-rows: minmax(0, 1fr);\r\n  grid-template-columns: minmax(100px, 1fr) auto;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 80px;\r\n  flex: 1;\r\n  margin-top: 15px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const StyledWeatherTemperature = styled(WeatherTemperature)`\r\n  font-size: 80px;\r\n  margin-left: 15px;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    font-size: 50px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { Typography } from '@material-ui/core';\r\nimport WeatherIcon from 'shared/components/WeatherIcon/WeatherIcon';\r\nimport {\r\n  StyledCurrentWeather,\r\n  CurrentWeatherDetails,\r\n  StyledWeatherTemperature,\r\n  WeatherTemperatureWrapper,\r\n} from './CurrentWeather.style';\r\n\r\nconst CurrentWeather = ({ location, currentWeather }) => {\r\n  const day = moment.unix(currentWeather.timestamp).format('dddd');\r\n\r\n  return (\r\n    <StyledCurrentWeather>\r\n      <div>\r\n        <Typography variant=\"h3\">{location.city}</Typography>\r\n        <Typography variant=\"h5\" color=\"textSecondary\">\r\n          {location.administrativeArea}, {location.country}\r\n        </Typography>\r\n\r\n        <Typography variant=\"h4\">{day}</Typography>\r\n      </div>\r\n\r\n      <CurrentWeatherDetails>\r\n        <Typography variant=\"h3\">{currentWeather.text}</Typography>\r\n\r\n        <WeatherTemperatureWrapper>\r\n          <WeatherIcon src={currentWeather.icon} />\r\n\r\n          <StyledWeatherTemperature temperature={currentWeather.temperature} />\r\n        </WeatherTemperatureWrapper>\r\n      </CurrentWeatherDetails>\r\n    </StyledCurrentWeather>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React, { forwardRef } from 'react';\r\nimport { omit } from 'lodash';\r\n\r\nconst excludeComponentProps = (Component, excludedProps) => {\r\n  return forwardRef((props, ref) => {\r\n    const filteredProps = omit(props, excludedProps);\r\n\r\n    return <Component ref={ref} {...filteredProps} />;\r\n  });\r\n};\r\n\r\nexport default excludeComponentProps;\r\n","import styled from 'styled-components';\r\nimport { IconButton, Card, CardContent } from '@material-ui/core';\r\nimport excludeComponentProps from 'shared/hocs/excludeComponentProps/excludeComponentProps';\r\n\r\nexport const StyledWeatherCard = styled(Card)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  min-height: 400px;\r\n  max-height: 600px;\r\n  flex: 1;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    max-height: unset;\r\n  }\r\n`;\r\n\r\nexport const WeatherCardContent = styled(CardContent)`\r\n  display: grid;\r\n  grid-auto-columns: 100%;\r\n  grid-template-rows: minmax(0, 1fr) auto;\r\n  grid-row-gap: 20px;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst CustomIconButton = excludeComponentProps(IconButton, ['isFavorite']);\r\n\r\nexport const FavoriteButton = styled(CustomIconButton)`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  font-size: 20px;\r\n  color: ${({ theme, isFavorite }) => isFavorite && theme.palette.error[theme.palette.type]};\r\n`;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport * as Icons from '@material-ui/icons';\r\nimport { isFavoriteLocation } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport { toggleFavoriteLocation } from 'redux/actions/SettingsActions/SettingsActions';\r\nimport DailyForecasts from './DailyForecasts/DailyForecasts';\r\nimport CurrentWeather from './CurrentWeather/CurrentWeather';\r\nimport { StyledWeatherCard, WeatherCardContent, FavoriteButton } from './WeatherCard.style';\r\n\r\nconst getFavoriteButtonTooltipTitle = (isFavorite) => {\r\n  let title;\r\n\r\n  if (isFavorite) {\r\n    title = 'Remove from Favorites';\r\n  } else {\r\n    title = 'Add to Favorites';\r\n  }\r\n\r\n  return title;\r\n};\r\n\r\nconst WeatherCard = ({ weather }) => {\r\n  const { location, currentWeather, dailyForecasts } = weather;\r\n  const isFavorite = useSelector(isFavoriteLocation(location.id));\r\n  const dispatch = useDispatch();\r\n\r\n  const onFavoriteButtonClick = () => {\r\n    dispatch(toggleFavoriteLocation(location));\r\n  };\r\n\r\n  return (\r\n    <StyledWeatherCard>\r\n      <Tooltip title={getFavoriteButtonTooltipTitle(isFavorite)}>\r\n        <FavoriteButton isFavorite={isFavorite} onClick={onFavoriteButtonClick}>\r\n          <Icons.Favorite fontSize=\"large\" />\r\n        </FavoriteButton>\r\n      </Tooltip>\r\n\r\n      <WeatherCardContent>\r\n        <CurrentWeather location={location} currentWeather={currentWeather} />\r\n\r\n        <DailyForecasts items={dailyForecasts} />\r\n      </WeatherCardContent>\r\n    </StyledWeatherCard>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import { useEffect } from 'react';\r\nimport WeatherServices from 'services/WeatherServices/WeatherServices';\r\nimport useFetchData from 'shared/hooks/useFetchData/useFetchData';\r\n\r\nconst fetchWeather = (location) => {\r\n  const currentWeatherRequest = WeatherServices.getCurrentWeather(location.id);\r\n  const dailyForecastsRequest = WeatherServices.getFiveDayForecasts(location.id);\r\n\r\n  return Promise.all([currentWeatherRequest, dailyForecastsRequest]).then(([currentWeather, dailyForecasts]) => ({\r\n    location,\r\n    currentWeather,\r\n    dailyForecasts,\r\n  }));\r\n};\r\n\r\nconst useWeather = (location) => {\r\n  const weather = useFetchData({\r\n    fetchData: fetchWeather,\r\n    dataName: 'weather',\r\n    defaultData: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (location) {\r\n      weather.loadData(location);\r\n    } else {\r\n      weather.clearData();\r\n    }\r\n  }, [location]);\r\n\r\n  return {\r\n    weather: weather.data,\r\n    isLoading: weather.isLoading,\r\n  };\r\n};\r\n\r\nexport default useWeather;\r\n","import React, { useState } from 'react';\r\nimport { useLocation as useRouterLocation } from 'react-router-dom';\r\nimport { isEmpty } from 'lodash';\r\nimport DataWidget from 'shared/components/DataWidget/DataWidget';\r\nimport { StyledHomePage } from './HomePage.style';\r\nimport LocationSearchField from './LocationSearchField/LocationSearchField';\r\nimport WeatherCard from './WeatherCard/WeatherCard';\r\nimport useWeather from './useWeather/useWeather';\r\n\r\nconst HomePage = () => {\r\n  const routerLocation = useRouterLocation();\r\n  const [selectedLocation, setSelectedLocation] = useState(routerLocation.state);\r\n  const { weather, isLoading } = useWeather(selectedLocation);\r\n\r\n  return (\r\n    <StyledHomePage>\r\n      <LocationSearchField onSelect={setSelectedLocation} />\r\n\r\n      <DataWidget loading={isLoading} hasData={!isEmpty(weather)} noDataMessage=\"No Location Selected\">\r\n        <WeatherCard weather={weather} />\r\n      </DataWidget>\r\n    </StyledHomePage>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledFavoritesPage = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 230px);\r\n  grid-auto-rows: 250px;\r\n  grid-gap: 20px;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    grid-template-columns: 1fr;\r\n    grid-auto-rows: 200px;\r\n  }\r\n`;\r\n","const HOME_PAGE = '/';\r\nconst FAVORITES_PAGE = '/favorites';\r\n\r\nexport default { HOME_PAGE, FAVORITES_PAGE };\r\n","import styled from 'styled-components';\r\nimport { Paper } from '@material-ui/core';\r\nimport WeatherTemperature from 'shared/components/WeatherTemperature/WeatherTemperature';\r\n\r\nexport const StyledFavoriteItem = styled(Paper)`\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-template-rows: auto auto 60px auto;\r\n  justify-items: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  grid-gap: 5px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  height: 100%;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WeatherTemperatureWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 60px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const StyledWeatherTemperature = styled(WeatherTemperature)`\r\n  font-size: 40px;\r\n  margin-left: 15px;\r\n`;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Typography } from '@material-ui/core';\r\nimport paths from 'constants/paths';\r\nimport WeatherIcon from 'shared/components/WeatherIcon/WeatherIcon';\r\nimport { StyledFavoriteItem, WeatherTemperatureWrapper, StyledWeatherTemperature } from './FavoriteItem.style';\r\n\r\nconst FavoriteItem = ({ weather }) => {\r\n  let history = useHistory();\r\n  const { location, currentWeather } = weather;\r\n\r\n  const onClick = () => {\r\n    history.push(paths.HOME_PAGE, location);\r\n  };\r\n\r\n  return (\r\n    <StyledFavoriteItem elevation={3} onClick={onClick}>\r\n      <Typography variant=\"h5\">{location.city}</Typography>\r\n      <Typography variant=\"h6\" color=\"textSecondary\">\r\n        {location.administrativeArea}, {location.country}\r\n      </Typography>\r\n\r\n      <WeatherTemperatureWrapper>\r\n        <WeatherIcon src={currentWeather.icon} />\r\n\r\n        <StyledWeatherTemperature temperature={currentWeather.temperature} />\r\n      </WeatherTemperatureWrapper>\r\n\r\n      <Typography variant=\"h5\">{currentWeather.text}</Typography>\r\n    </StyledFavoriteItem>\r\n  );\r\n};\r\n\r\nexport default FavoriteItem;\r\n","import { useEffect } from 'react';\r\nimport { isEmpty } from 'lodash';\r\nimport WeatherServices from 'services/WeatherServices/WeatherServices';\r\nimport useFetchData from 'shared/hooks/useFetchData/useFetchData';\r\n\r\nconst fetchCurrentWeather = (location) => {\r\n  return WeatherServices.getCurrentWeather(location.id)\r\n    .then((data) => ({\r\n      location,\r\n      currentWeather: data,\r\n    }))\r\n    .catch(() => null);\r\n};\r\n\r\nconst fetchWeatherLocations = (locations) => {\r\n  const requests = locations.map(fetchCurrentWeather);\r\n\r\n  return Promise.all(requests).then((data) => {\r\n    const filteredData = data.filter((item) => !isEmpty(item));\r\n\r\n    if (isEmpty(filteredData)) {\r\n      throw new Error(`no results found`);\r\n    }\r\n\r\n    return filteredData;\r\n  });\r\n};\r\n\r\nconst useFavorites = (favoriteLocations) => {\r\n  const weatherLocations = useFetchData({\r\n    fetchData: fetchWeatherLocations,\r\n    dataName: 'favorite weather locations',\r\n    defaultData: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    !isEmpty(favoriteLocations) && weatherLocations.loadData(favoriteLocations);\r\n  }, [favoriteLocations]);\r\n\r\n  return {\r\n    weatherLocations: weatherLocations.data,\r\n    isLoading: weatherLocations.isLoading,\r\n  };\r\n};\r\n\r\nexport default useFavorites;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { isEmpty } from 'lodash';\r\nimport DataWidget from 'shared/components/DataWidget/DataWidget';\r\nimport { getFavorites } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport { StyledFavoritesPage } from './FavoritesPage.style';\r\nimport FavoriteItem from './FavoriteItem/FavoriteItem';\r\nimport useFavorites from './useFavorites/useFavorites';\r\n\r\nconst FavoritesPage = () => {\r\n  const favorites = useSelector(getFavorites);\r\n  const { weatherLocations, isLoading } = useFavorites(favorites);\r\n\r\n  return (\r\n    <DataWidget loading={isLoading} hasData={!isEmpty(weatherLocations)} noDataMessage=\"No Favorite Added\">\r\n      <StyledFavoritesPage>\r\n        {weatherLocations.map((weather) => (\r\n          <FavoriteItem key={weather.location.id} weather={weather} />\r\n        ))}\r\n      </StyledFavoritesPage>\r\n    </DataWidget>\r\n  );\r\n};\r\n\r\nexport default FavoritesPage;\r\n","import styled from 'styled-components';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport const TemperatureButton = styled(Button).attrs({\r\n  variant: 'contained',\r\n  disableRipple: true,\r\n  disableElevation: true,\r\n})`\r\n  border-radius: 0;\r\n  padding: 0;\r\n  min-width: 30px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTemperatureSwitch = styled.div`\r\n  border: 1px solid #fff;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n\r\n  ${TemperatureButton} {\r\n    :first-child {\r\n      border-top-left-radius: inherit;\r\n      border-bottom-left-radius: inherit;\r\n    }\r\n\r\n    :last-child {\r\n      border-top-right-radius: inherit;\r\n      border-bottom-right-radius: inherit;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport temperatureUnits from 'constants/temperatureUnits';\r\nimport { getTemperatureUnit } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport { setTemperatureUnit } from 'redux/actions/SettingsActions/SettingsActions';\r\nimport { StyledTemperatureSwitch, TemperatureButton } from './TemperatureSwitch.style';\r\n\r\nconst buttonColors = {\r\n  default: 'default',\r\n  selected: 'secondary',\r\n};\r\n\r\nconst getButtonColor = (selectedUnit, unit) => {\r\n  let color = buttonColors.default;\r\n\r\n  if (selectedUnit === unit) {\r\n    color = buttonColors.selected;\r\n  }\r\n\r\n  return color;\r\n};\r\n\r\nconst TemperatureSwitch = () => {\r\n  const temperatureUnit = useSelector(getTemperatureUnit);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledTemperatureSwitch>\r\n      <Tooltip title=\"Celsius\">\r\n        <TemperatureButton\r\n          color={getButtonColor(temperatureUnit, temperatureUnits.CELSIUS)}\r\n          onClick={() => dispatch(setTemperatureUnit(temperatureUnits.CELSIUS))}\r\n        >\r\n          °C\r\n        </TemperatureButton>\r\n      </Tooltip>\r\n\r\n      <Tooltip title=\"Fahrenheit\">\r\n        <TemperatureButton\r\n          color={getButtonColor(temperatureUnit, temperatureUnits.FAHRENHEIT)}\r\n          onClick={() => dispatch(setTemperatureUnit(temperatureUnits.FAHRENHEIT))}\r\n        >\r\n          °F\r\n        </TemperatureButton>\r\n      </Tooltip>\r\n    </StyledTemperatureSwitch>\r\n  );\r\n};\r\n\r\nexport default TemperatureSwitch;\r\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Link = styled(NavLink).attrs({ activeClassName: 'selected', exact: true })`\r\n  display: flex;\r\n  align-items: center;\r\n  color: inherit;\r\n  text-decoration: none;\r\n  margin-left: 10px;\r\n  font-weight: bold;\r\n\r\n  &.selected {\r\n    color: ${({ theme }) => theme.palette.secondary[theme.palette.type]};\r\n  }\r\n`;\r\n\r\nexport const LinkLabel = styled.label`\r\n  margin-left: 5px;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { Link, LinkLabel } from './HeaderLink.style';\r\n\r\nconst HeaderLink = ({ label, icon: Icon, ...linkProps }) => {\r\n  return (\r\n    <Link {...linkProps}>\r\n      <Icon />\r\n\r\n      <LinkLabel>{label}</LinkLabel>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default HeaderLink;\r\n","import styled from 'styled-components';\r\nimport { Toolbar, IconButton, Typography, MenuItem } from '@material-ui/core';\r\nimport HeaderLink from './HeaderLink/HeaderLink';\r\n\r\nexport const StyledToolbar = styled(Toolbar)`\r\n  white-space: nowrap;\r\n`;\r\n\r\nexport const StyledIconButton = styled(IconButton)`\r\n  color: inherit;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Title = styled.span`\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const Links = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  margin: 0 20px;\r\n`;\r\n\r\nexport const Controls = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n\r\n  & > *:not(:first-child) {\r\n    margin-left: 20px;\r\n  }\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nexport const StyledMenuItem = styled(MenuItem)`\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport const MenuItemLabel = styled(Typography).attrs({\r\n  variant: 'p',\r\n  noWrap: true,\r\n})`\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport const MenuItemLink = styled(HeaderLink)`\r\n  margin-left: 0;\r\n  width: 100%;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { get } from 'lodash';\r\nimport { AppBar, Tooltip, Menu, Hidden, Divider } from '@material-ui/core';\r\nimport * as Icons from '@material-ui/icons';\r\nimport themeTypes from 'constants/themeTypes';\r\nimport { getThemeType } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\nimport { setThemeType } from 'redux/actions/SettingsActions/SettingsActions';\r\nimport paths from 'constants/paths';\r\nimport TemperatureSwitch from './TemperatureSwitch/TemperatureSwitch';\r\nimport HeaderLink from './HeaderLink/HeaderLink';\r\nimport {\r\n  StyledToolbar,\r\n  StyledIconButton,\r\n  Title,\r\n  Links,\r\n  Controls,\r\n  StyledMenuItem,\r\n  MenuItemLabel,\r\n  MenuItemLink,\r\n} from './Header.style';\r\n\r\nconst themeIcons = {\r\n  [themeTypes.LIGHT]: <Icons.Brightness7 />,\r\n  [themeTypes.DARK]: <Icons.Brightness4 />,\r\n};\r\n\r\nconst Header = () => {\r\n  const [moreButtonAnchorEl, setMoreButtonAnchorEl] = useState(null);\r\n  const themeType = useSelector(getThemeType);\r\n  const dispatch = useDispatch();\r\n\r\n  const themeIcon = get(themeIcons, themeType, themeIcons[themeTypes.LIGHT]);\r\n\r\n  const onClickMoreButton = (event) => {\r\n    setMoreButtonAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const closeHeaderMenu = () => {\r\n    setMoreButtonAnchorEl(null);\r\n  };\r\n\r\n  const onToggleTheme = () => {\r\n    let newThemeType = themeTypes.LIGHT;\r\n\r\n    if (themeType === themeTypes.LIGHT) {\r\n      newThemeType = themeTypes.DARK;\r\n    }\r\n\r\n    dispatch(setThemeType(newThemeType));\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <StyledToolbar>\r\n        <Title variant=\"h6\">Herolo Weather</Title>\r\n\r\n        <Hidden xsDown>\r\n          <Links>\r\n            <HeaderLink to={paths.HOME_PAGE} label=\"Home\" icon={Icons.Home} />\r\n\r\n            <HeaderLink to={paths.FAVORITES_PAGE} label=\"Favorites\" icon={Icons.Favorite} />\r\n          </Links>\r\n        </Hidden>\r\n\r\n        <Controls>\r\n          <Hidden xsDown>\r\n            <TemperatureSwitch />\r\n\r\n            <Tooltip title=\"Toggle light/dark theme\">\r\n              <StyledIconButton onClick={onToggleTheme}>{themeIcon}</StyledIconButton>\r\n            </Tooltip>\r\n          </Hidden>\r\n\r\n          <Hidden smUp>\r\n            <StyledIconButton onClick={onClickMoreButton}>\r\n              <Icons.MoreVert />\r\n            </StyledIconButton>\r\n          </Hidden>\r\n        </Controls>\r\n\r\n        <Menu anchorEl={moreButtonAnchorEl} open={Boolean(moreButtonAnchorEl)} onClose={closeHeaderMenu}>\r\n          <StyledMenuItem>\r\n            <MenuItemLink to={paths.HOME_PAGE} label=\"Home\" icon={Icons.Home} onClick={closeHeaderMenu} />\r\n          </StyledMenuItem>\r\n\r\n          <StyledMenuItem>\r\n            <MenuItemLink to={paths.FAVORITES_PAGE} label=\"Favorites\" icon={Icons.Favorite} onClick={closeHeaderMenu} />\r\n          </StyledMenuItem>\r\n\r\n          <Divider />\r\n\r\n          <StyledMenuItem>\r\n            <MenuItemLabel>Temperature</MenuItemLabel>\r\n            <TemperatureSwitch />\r\n          </StyledMenuItem>\r\n\r\n          <StyledMenuItem>\r\n            <MenuItemLabel>Theme</MenuItemLabel>\r\n            <StyledIconButton onClick={onToggleTheme}>{themeIcon}</StyledIconButton>\r\n          </StyledMenuItem>\r\n        </Menu>\r\n      </StyledToolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledLayout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px 30px;\r\n  flex: 1;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.breakpoints.down('xs')} {\r\n    padding: 10px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport HomePage from 'components/pages/HomePage/HomePage';\r\nimport FavoritesPage from 'components/pages/FavoritesPage/FavoritesPage';\r\nimport paths from 'constants/paths';\r\nimport Header from './Header/Header';\r\nimport { StyledLayout, Content } from './Layout.style';\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <StyledLayout>\r\n        <Header />\r\n\r\n        <Content>\r\n          <Switch>\r\n            <Route path={paths.HOME_PAGE} exact={true} component={HomePage} />\r\n\r\n            <Route path={paths.FAVORITES_PAGE} exact={true} component={FavoritesPage} />\r\n          </Switch>\r\n        </Content>\r\n      </StyledLayout>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { StylesProvider } from '@material-ui/core/styles';\r\nimport { ThemeProvider as MuiThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport GlobalStyle from 'styles/globalStyle/globalStyle';\r\nimport { getTheme } from 'styles/theme/theme';\r\nimport Layout from 'components/Layout/Layout';\r\nimport { getThemeType } from 'redux/selectors/SettingsSelectors/SettingsSelectors';\r\n\r\nconst App = () => {\r\n  const themeType = useSelector(getThemeType);\r\n  const theme = getTheme(themeType);\r\n\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <ThemeProvider theme={theme}>\r\n        <StylesProvider injectFirst>\r\n          <CssBaseline />\r\n\r\n          <GlobalStyle />\r\n\r\n          <Layout />\r\n        </StylesProvider>\r\n      </ThemeProvider>\r\n    </MuiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux/store';\r\nimport App from 'components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}